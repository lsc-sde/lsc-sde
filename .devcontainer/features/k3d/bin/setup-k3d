#!/bin/bash

sudo chmod 0777 /var/lib/rancher/k3s/storage

. /etc/k3d/setup/environment

CONFIG_CALICO="/etc/k3d/setup/calico.yaml"

configure_kalico() {
    if [ "${INSTALLCALICO}" == "true" ]; then
        if [ ! -f "${CONFIG_CALICO}" ]; then
            echo "ERROR: ${CONFIG_CALICO} file is missing. Ensure calico is set up (and flannel is disabled) for k3d."
            exit 1
        fi
    fi
}

install_k3d() {
    curl -sSL https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
}

create_k3d_cluster() {
    configure_kalico
    
    #k3d registry delete --all
    #k3d cluster delete --all
    
    echo "Looking for k3d-${CLUSTERNAME}-registry.local entry in /etc/hosts"
    HOSTS_ENTRY=$(cat /etc/hosts | grep "k3d-${CLUSTERNAME}-registry.local")

    if [ -z "${HOSTS_ENTRY}" ]; then
        echo "entry not found, creating"
        sudo /bin/bash -c "echo \"127.0.0.1 k3d-${CLUSTERNAME}-registry.local\" >> /etc/hosts"
    else
        echo "entry already exists"
    fi
    


    mkdir -p /var/lib/rancher/k3s/storage

    k3d_registry_cmd=(k3d registry create ${CLUSTERNAME}-registry.local --port ${REGISTRY_PORT})
    
    k3d_install_cmd=(k3d cluster create ${CLUSTERNAME})
    k3d_install_cmd+=( --registry-use "k3d-${CLUSTERNAME}-registry.local:${REGISTRY_PORT}" )
    
    k3d_install_cmd+=( -v "${HOSTVOLUMEPATH}:/var/lib/rancher/k3s/storage@all" )


    if [ "${DISABLETRAEFIK}" == "true" ]; then
        k3d_install_cmd+=( --k3s-arg "--disable=traefik@server:*" )
    fi

    if [ "${DISABLEFLANNEL}" == "true" ]; then
        k3d_install_cmd+=( --k3s-arg '--flannel-backend=none@server:*' )
    fi

    if [ "${INSTALLCALICO}" == "true" ]; then
        k3d_install_cmd+=( -v "${CONFIG_CALICO}:/var/lib/rancher/k3s/server/manifests/calico.yaml" )
    fi

    if [ "${DISABLELOADBALANCER}" == "true" ]; then
        k3d_install_cmd+=( --no-lb )
    fi

    k3d_install_cmd+=( --wait )

    REGISTRY_LIST=$(k3d registry list "${CLUSTERNAME}-registry.local")
    if [ $? -ne 0 ]; then
        echo "Executing ${k3d_registry_cmd[@]}"
        ${k3d_registry_cmd[@]}
    fi

    CLUSTER_LIST=$(k3d cluster list "${CLUSTERNAME}")
    if [ $? -ne 0 ]; then
        echo "Executing ${k3d_install_cmd[@]}"
        ${k3d_install_cmd[@]}
    else
        echo "${CLUSTERNAME} Cluster already exists, merging kubeconfig and switching context"
        k3d kubeconfig merge ${CLUSTERNAME} -d -s
    fi
}

install_k3d
create_k3d_cluster
exit $?