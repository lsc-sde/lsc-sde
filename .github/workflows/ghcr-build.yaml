on:
  workflow_call:
    inputs:
      imageName:
        required: true
        type: string
      tag:
        required: true
        type: string
      publisher:
        type: string
        default: dockerhub
      platforms: 
        type: string
        default: '[ "amd64", "arm64" ]'
      pathToImageDefinition:
        type: string
      runnerType: 
        type: string
        default: ubuntu-latest
        required: false
      targets:
        description: Optional input to allow creation of multiple stage targets defined in image Dockerfile
        type: string
        required: false
      buildArgs:
        description: Optional JSON array of docker target build arguments
        type: string
        required: false

jobs:
  build:
    permissions:
      packages: write
      contents: read
    runs-on: ${{ inputs.runnerType }} 
    strategy:
      fail-fast: false
      matrix:
        platform:  ${{ fromJSON(inputs.platforms) }}
        buildArgs: ${{ fromJSON(inputs.buildArgs || '[{"null":"null"}]' ) }}
        target: ${{ fromJSON(inputs.targets || '["null"]' ) }}
        os:
        - linux
    steps:
    - name: Check number of CPU cores
      run: |
        echo "Runner cores:$(nproc)"

    - uses: actions/checkout@v3      

    - name: Build Args JSON to List Output
      id: parse_build_args
      env:
       JSON_ARGS: ${{ toJSON(matrix.buildArgs) }}
      run: |
        echo $JSON_ARGS | jq -r 'to_entries | map("\(.key)=\(.value)") | join("\n")' | tee build_args.txt
        echo "build_args<<EOF" >> $GITHUB_OUTPUT
        cat build_args.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "image_name=ghcr.io/${GITHUB_REPOSITORY}/${{ inputs.imageName }}" >> $GITHUB_OUTPUT

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.parse_build_args.outputs.image_name }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push
      id: build
      uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.pathToImageDefinition }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: ${{ matrix.os }}/${{ matrix.platform }}
        outputs: type=image,name=${{ steps.parse_build_args.outputs.image_name }},push-by-digest=true,name-canonical=true,push=true
        target: ${{ matrix.target != 'null' && matrix.target || null }}
        build-args: |
          <<EOF
          ${{ steps.parse_build_args.outputs.build_args }}
          EOF

    - 
      name: Build digest url
      id: concatenate
      run: |
        digest_url="${{ matrix.target }}/${{ inputs.imageName }}-${{ matrix.buildArgs.TARGET_VERSION != null && matrix.buildArgs.TARGET_VERSION  || '' }}"
        echo "digest_url=$digest_url" >> $GITHUB_OUTPUT

    - name: Export digest
      run: |
        mkdir -p /tmp/digests/${{ steps.concatenate.outputs.digest_url }}
        digest="${{ steps.build.outputs.digest }}"
        touch "/tmp/digests/${{ steps.concatenate.outputs.digest_url  }}/${digest#sha256:}" 

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ inputs.imageName }}-${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.target }}
        path: /tmp/digests/${{ steps.concatenate.outputs.digest_url }}/*
        if-no-files-found: error
        retention-days: 1
    - run: |
        find /tmp/digests
       
  merge:
    runs-on: ${{ inputs.runnerType }}
    permissions:
      packages: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        buildArgs: ${{ fromJSON(inputs.buildArgs || '[{"null":"null"}]' ) }}
        target: ${{ fromJSON(inputs.targets || '["null"]' ) }}
    needs:
      - build
    steps:
      - 
        name: Concatenate dynamic tag and digest variables
        id: concatenate
        run: |
          digest_url="${{ matrix.target }}/${{ inputs.imageName }}-${{ matrix.buildArgs.TARGET_VERSION != null && matrix.buildArgs.TARGET_VERSION  || '' }}"
          tag_prefix="${{ matrix.target != 'null' && matrix.target  || '' }}${{ matrix.buildArgs.TARGET_VERSION != null && format('{0}-', matrix.buildArgs.TARGET_VERSION) || '' }}"
          echo "digest_url=$digest_url" >> $GITHUB_OUTPUT
          echo "tag_prefix=$tag_prefix" >> $GITHUB_OUTPUT
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests/${{ steps.concatenate.outputs.digest_url }}
          pattern: digests-${{ inputs.imageName }}-*-*-${{ matrix.target }}
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/$GITHUB_REPOSITORY/${{ inputs.imageName }}
          tags: |
            type=raw,${{ steps.concatenate.outputs.tag_prefix }}${{ inputs.tag }}
          labels: |
            org.opencontainers.image.title=${{ inputs.imageName }}
            org.opencontainers.image.description=${{ inputs.imageName }} container image
            org.opencontainers.image.vendor=lsc-sde
            uk.nhs.xlscsde.build.action=${GITHUB_ACTION}
            uk.nhs.xlscsde.build.run=${GITHUB_RUN_ID}
            uk.nhs.xlscsde.build.repo=${GITHUB_ACTION_REPOSITORY}
            uk.nhs.xlscsde.build.commit=${GITHUB_SHA}
      -
        name: Create manifest list and push
        working-directory: /tmp/digests/${{ steps.concatenate.outputs.digest_url }}
        run: |
          TAGNAME="ghcr.io/$GITHUB_REPOSITORY/${{ inputs.imageName }}:${{ steps.concatenate.outputs.tag_prefix }}${{ inputs.tag }}"
          DATA=$(printf "ghcr.io/$GITHUB_REPOSITORY/${{ inputs.imageName }}@sha256:%s\n" *)
          echo $DATA
          docker buildx imagetools create -t "${TAGNAME}" $(echo $DATA | xargs)
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/$GITHUB_REPOSITORY/${{ inputs.imageName }}:${{ steps.meta.outputs.version }} 