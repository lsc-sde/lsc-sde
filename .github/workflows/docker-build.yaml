on:
  workflow_call:
    inputs:
      imageName:
        required: true
        type: string
      tag:
        required: true
        type: string
      platforms: 
        type: string
        default: '[ "amd64", "arm64" ]'
      targets:
        description: Optional var to allow creation of multiple stage targets defined in image Dockerfile
        type: string
        required: false
      buildArgs:
        description: Optional JSON array of build arguments
        type: string
        required: false
        default: '[{"KEY":"VALUE"}]'
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:  ${{ fromJSON(inputs.platforms) }}
        buildArgs: ${{ fromJSON(inputs.buildArgs) }}
        target: ${{ fromJSON(inputs.targets || '[]') }}
        os:
        - linux
    steps:
    - uses: actions/checkout@v3      

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: lscsde/${{ inputs.imageName }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}


    #- uses: docker/build-push-action@v5.1.0
    - name: Build Args JSON to List Output
      id: parse_build_args
      env:
       JSON_ARGS: ${{ toJSON(matrix.buildArgs) }}
      run: |
        echo $JSON_ARGS | jq -r 'to_entries | map("\(.key)=\(.value)") | join("\n")' | tee build_args.txt
        echo "build_args<<EOF" >> $GITHUB_OUTPUT
        cat build_args.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Build and push
      id: build
      uses: docker/build-push-action@v6
      with:
        platforms: ${{ matrix.os }}/${{ matrix.platform }}
        outputs: type=image,name=lscsde/${{ inputs.imageName }},push-by-digest=true,name-canonical=true,push=true
        target: ${{ matrix.target }}
        build-args: |
          <<EOF
          ${{ steps.parse_build_args.outputs.build_args }}
          EOF

    - name: Export digest
      run: |
        mkdir -p /tmp/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "/tmp/digests/${digest#sha256:}" 

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ matrix.os }}-${{ matrix.platform }}
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1
  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      # - 
      #  name: Modify 'tag' if 'tagPrefix' is not empty
      #  id: revised_tag
      #  env:
      #   tag: ${{ inputs.tag }}
      #   tagPrefix: ${{ inputs.tagPrefix }}
      #  run: |
      #    echo "$tag"
      #    echo "$tagPrefix"
      #    if [ -n "$tagPrefix" ]; then
      #     tag="${tagPrefix}-${tag}"
      #    fi
      #    echo "::set-output name=revised_tag::$tag"
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: lscsde/${{ inputs.imageName }}
          tags: |
            type=raw,${{ inputs.tag }}
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          TAGNAME="lscsde/${{ inputs.imageName }}:${{ inputs.tag }}"
          DATA=$(printf "lscsde/${{ inputs.imageName }}@sha256:%s\n" *)
          echo $DATA
          docker buildx imagetools create -t "${TAGNAME}" $(echo $DATA | xargs)
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect lscsde/${{ inputs.imageName }}:${{ steps.meta.outputs.version }} 